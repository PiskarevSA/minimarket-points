// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi

import (
	"context"
	json "github.com/bytedance/sonic"
	"fmt"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
	CookieAuthScopes = "cookieAuth.Scopes"
)

// Defines values for DomainErrorCode.
const (
	D1215 DomainErrorCode = "D1215"
	D1164 DomainErrorCode = "D1164"
)

// Defines values for InternalServerErrorCode.
const (
	S1394 InternalServerErrorCode = "S1394"
)

// Defines values for InternalServerErrorMessage.
const (
	InternalError InternalServerErrorMessage = "internal error"
)

// Defines values for ValidationErrorCode.
const (
	V1431 ValidationErrorCode = "V1431"
	V1512 ValidationErrorCode = "V1512"
)

// DepositRequest defines model for DepositRequest.
type DepositRequest struct {
	// Amount Сумма бонусов к зачислению
	Amount string `json:"amount"`

	// OrderNumber Номер заказа за который будут начислены бонусы
	OrderNumber *string `json:"orderNumber,omitempty"`

	// UserId Уникальный идентификатор пользователя
	UserId openapi_types.UUID `json:"userId"`
}

// DepositResponse defines model for DepositResponse.
type DepositResponse struct {
	// ProccessedAt Дата и время зачисления бонусов
	ProccessedAt time.Time `json:"proccessedAt"`
}

// DomainErrorResponse defines model for DomainError.
type DomainErrorResponse struct {
	// Code Уникальный код доменной ошибки
	Code DomainErrorCode `json:"code"`

	// Message Человеко‑читаемое сообщение об ошибке
	Message string `json:"message"`
}

// DomainErrorCode Уникальный код доменной ошибки
type DomainErrorCode string

// GetBalanceResponse defines model for GetBalanceResponse.
type GetBalanceResponse struct {
	// Available Сумма бонусов доступная для траты
	Available string `json:"available"`

	// UpdatedAt Дата и время последнего обновления бонусного баланса
	UpdatedAt time.Time `json:"updatedAt"`

	// Withdrawn Сумма бонусов, которая была потрачена за все время
	Withdrawn string `json:"withdrawn"`
}

// GetWithdrawalsResponse defines model for GetWithdrawalsResponse.
type GetWithdrawalsResponse = []struct {
	// Amount Сумма списанных бонусов
	Amount string `json:"amount"`

	// Id Номер транзакции
	Id int32 `json:"id"`

	// OrderNumber Номер заказа за который были списаны бонусы
	OrderNumber string `json:"orderNumber"`

	// ProccessedAt Дата и время списания бонусов
	ProccessedAt time.Time `json:"proccessedAt"`
}

// InternalServerErrorResponse defines model for InternalServerError.
type InternalServerErrorResponse struct {
	// Code Уникальный код серверной ошибки
	Code InternalServerErrorCode `json:"code"`

	// Message Человеко‑читаемое сообщение об ошибке
	Message InternalServerErrorMessage `json:"message"`
}

// InternalServerErrorCode Уникальный код серверной ошибки
type InternalServerErrorCode string

// InternalServerErrorMessage Человеко‑читаемое сообщение об ошибке
type InternalServerErrorMessage string

// ValidationErrorResponse defines model for ValidationError.
type ValidationErrorResponse struct {
	// Code Уникальный код ошибки валидацииы
	Code ValidationErrorCode `json:"code"`

	// Field Имя поля с данными неверного формата
	Field string `json:"field"`

	// Message Человеко‑читаемое сообщение об ошибке
	Message string `json:"message"`
}

// ValidationErrorCode Уникальный код ошибки валидацииы
type ValidationErrorCode string

// WithdrawRequest defines model for WithdrawRequest.
type WithdrawRequest struct {
	// Amount Сумма бонусов к списанию
	Amount string `json:"amount"`

	// OrderNumber Номер заказа за который будут списаны бонусы
	OrderNumber string `json:"orderNumber"`
}

// WithdrawResponse defines model for WithdrawResponse.
type WithdrawResponse struct {
	// ProccessedAt Дата и время списания бонусов
	ProccessedAt time.Time `json:"proccessedAt"`
}

// GetWithdrawalsParams defines parameters for GetWithdrawals.
type GetWithdrawalsParams struct {
	// Offset Смещение, от которого начинается выборка записей
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Максимальное число операций списания бонусов в ответе
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// DepositJSONRequestBody defines body for Deposit for application/json ContentType.
type DepositJSONRequestBody = DepositRequest

// WithdrawJSONRequestBody defines body for Withdraw for application/json ContentType.
type WithdrawJSONRequestBody = WithdrawRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/user/balance)
	GetBalance(w http.ResponseWriter, r *http.Request)

	// (POST /api/user/balance/deposit)
	Deposit(w http.ResponseWriter, r *http.Request)

	// (POST /api/user/balance/withdraw)
	Withdraw(w http.ResponseWriter, r *http.Request)

	// (GET /api/user/withdrawals)
	GetWithdrawals(w http.ResponseWriter, r *http.Request, params GetWithdrawalsParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (GET /api/user/balance)
func (_ Unimplemented) GetBalance(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /api/user/balance/deposit)
func (_ Unimplemented) Deposit(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /api/user/balance/withdraw)
func (_ Unimplemented) Withdraw(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/user/withdrawals)
func (_ Unimplemented) GetWithdrawals(w http.ResponseWriter, r *http.Request, params GetWithdrawalsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetBalance operation middleware
func (siw *ServerInterfaceWrapper) GetBalance(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetBalance(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Deposit operation middleware
func (siw *ServerInterfaceWrapper) Deposit(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Deposit(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Withdraw operation middleware
func (siw *ServerInterfaceWrapper) Withdraw(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Withdraw(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetWithdrawals operation middleware
func (siw *ServerInterfaceWrapper) GetWithdrawals(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetWithdrawalsParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWithdrawals(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/user/balance", wrapper.GetBalance)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/user/balance/deposit", wrapper.Deposit)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/user/balance/withdraw", wrapper.Withdraw)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/user/withdrawals", wrapper.GetWithdrawals)
	})

	return r
}

type GetBalanceRequestObject struct {
}

type GetBalanceResponseObject interface {
	VisitGetBalanceResponse(w http.ResponseWriter) error
}

type GetBalance200JSONResponse GetBalanceResponse

func (response GetBalance200JSONResponse) VisitGetBalanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.ConfigDefault.NewEncoder(w).Encode(response)
}

type GetBalance401Response struct {
}

func (response GetBalance401Response) VisitGetBalanceResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetBalance500JSONResponse InternalServerErrorResponse

func (response GetBalance500JSONResponse) VisitGetBalanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.ConfigDefault.NewEncoder(w).Encode(response)
}

type DepositRequestObject struct {
	Body *DepositJSONRequestBody
}

type DepositResponseObject interface {
	VisitDepositResponse(w http.ResponseWriter) error
}

type Deposit200JSONResponse DepositResponse

func (response Deposit200JSONResponse) VisitDepositResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.ConfigDefault.NewEncoder(w).Encode(response)
}

type Deposit400JSONResponse ValidationErrorResponse

func (response Deposit400JSONResponse) VisitDepositResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.ConfigDefault.NewEncoder(w).Encode(response)
}

type Deposit401Response struct {
}

func (response Deposit401Response) VisitDepositResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type Deposit422JSONResponse DomainErrorResponse

func (response Deposit422JSONResponse) VisitDepositResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.ConfigDefault.NewEncoder(w).Encode(response)
}

type Deposit500JSONResponse InternalServerErrorResponse

func (response Deposit500JSONResponse) VisitDepositResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.ConfigDefault.NewEncoder(w).Encode(response)
}

type WithdrawRequestObject struct {
	Body *WithdrawJSONRequestBody
}

type WithdrawResponseObject interface {
	VisitWithdrawResponse(w http.ResponseWriter) error
}

type Withdraw200JSONResponse WithdrawResponse

func (response Withdraw200JSONResponse) VisitWithdrawResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.ConfigDefault.NewEncoder(w).Encode(response)
}

type Withdraw400JSONResponse ValidationErrorResponse

func (response Withdraw400JSONResponse) VisitWithdrawResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.ConfigDefault.NewEncoder(w).Encode(response)
}

type Withdraw401Response struct {
}

func (response Withdraw401Response) VisitWithdrawResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type Withdraw422JSONResponse DomainErrorResponse

func (response Withdraw422JSONResponse) VisitWithdrawResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.ConfigDefault.NewEncoder(w).Encode(response)
}

type Withdraw500JSONResponse InternalServerErrorResponse

func (response Withdraw500JSONResponse) VisitWithdrawResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.ConfigDefault.NewEncoder(w).Encode(response)
}

type GetWithdrawalsRequestObject struct {
	Params GetWithdrawalsParams
}

type GetWithdrawalsResponseObject interface {
	VisitGetWithdrawalsResponse(w http.ResponseWriter) error
}

type GetWithdrawals200JSONResponse GetWithdrawalsResponse

func (response GetWithdrawals200JSONResponse) VisitGetWithdrawalsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.ConfigDefault.NewEncoder(w).Encode(response)
}

type GetWithdrawals400JSONResponse ValidationErrorResponse

func (response GetWithdrawals400JSONResponse) VisitGetWithdrawalsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.ConfigDefault.NewEncoder(w).Encode(response)
}

type GetWithdrawals401Response struct {
}

func (response GetWithdrawals401Response) VisitGetWithdrawalsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetWithdrawals500JSONResponse InternalServerErrorResponse

func (response GetWithdrawals500JSONResponse) VisitGetWithdrawalsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.ConfigDefault.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /api/user/balance)
	GetBalance(ctx context.Context, request GetBalanceRequestObject) (GetBalanceResponseObject, error)

	// (POST /api/user/balance/deposit)
	Deposit(ctx context.Context, request DepositRequestObject) (DepositResponseObject, error)

	// (POST /api/user/balance/withdraw)
	Withdraw(ctx context.Context, request WithdrawRequestObject) (WithdrawResponseObject, error)

	// (GET /api/user/withdrawals)
	GetWithdrawals(ctx context.Context, request GetWithdrawalsRequestObject) (GetWithdrawalsResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetBalance operation middleware
func (sh *strictHandler) GetBalance(w http.ResponseWriter, r *http.Request) {
	var request GetBalanceRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetBalance(ctx, request.(GetBalanceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetBalance")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetBalanceResponseObject); ok {
		if err := validResponse.VisitGetBalanceResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Deposit operation middleware
func (sh *strictHandler) Deposit(w http.ResponseWriter, r *http.Request) {
	var request DepositRequestObject

	var body DepositJSONRequestBody
	if err := json.ConfigDefault.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Deposit(ctx, request.(DepositRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Deposit")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DepositResponseObject); ok {
		if err := validResponse.VisitDepositResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Withdraw operation middleware
func (sh *strictHandler) Withdraw(w http.ResponseWriter, r *http.Request) {
	var request WithdrawRequestObject

	var body WithdrawJSONRequestBody
	if err := json.ConfigDefault.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Withdraw(ctx, request.(WithdrawRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Withdraw")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(WithdrawResponseObject); ok {
		if err := validResponse.VisitWithdrawResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetWithdrawals operation middleware
func (sh *strictHandler) GetWithdrawals(w http.ResponseWriter, r *http.Request, params GetWithdrawalsParams) {
	var request GetWithdrawalsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetWithdrawals(ctx, request.(GetWithdrawalsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetWithdrawals")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetWithdrawalsResponseObject); ok {
		if err := validResponse.VisitGetWithdrawalsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
