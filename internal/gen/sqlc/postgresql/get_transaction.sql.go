// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: get_transaction.sql

package postgresql

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getTransactions = `-- name: GetTransactions :many
SELECT
    id,
    user_id,
    order_number,
    operation,
    amount,
    proccessedAt
FROM transactions
WHERE user_id = $1::UUID 
    AND ($2::VARCHAR(16) = '' OR operation = $2)
ORDER BY id DESC
OFFSET $3::INTEGER
LIMIT $4::INTEGER
`

type GetTransactionsParams struct {
	UserId    uuid.UUID
	Operation string
	Offset    pgtype.Int4
	Limit     pgtype.Int4
}

func (q *Queries) GetTransactions(ctx context.Context, arg GetTransactionsParams) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, getTransactions,
		arg.UserId,
		arg.Operation,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.Id,
			&i.UserId,
			&i.OrderNumber,
			&i.Operation,
			&i.Amount,
			&i.Proccessedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
