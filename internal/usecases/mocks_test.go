// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package usecases

import (
	"context"
	"sync"
	"time"

	"github.com/PiskarevSA/minimarket-points/internal/domain/entities"
	"github.com/PiskarevSA/minimarket-points/internal/domain/objects"
	"github.com/google/uuid"
)

// Ensure that MockGetBalanceRepo does implement GetBalanceRepo.
// If this is not the case, regenerate this file with mockery.
var _ GetBalanceRepo = &MockGetBalanceRepo{}

// MockGetBalanceRepo is a mock implementation of GetBalanceRepo.
//
//	func TestSomethingThatUsesGetBalanceRepo(t *testing.T) {
//
//		// make and configure a mocked GetBalanceRepo
//		mockedGetBalanceRepo := &MockGetBalanceRepo{
//			GetBalanceFunc: func(ctx context.Context, userId uuid.UUID) (objects.Balance, error) {
//				panic("mock out the GetBalance method")
//			},
//		}
//
//		// use mockedGetBalanceRepo in code that requires GetBalanceRepo
//		// and then make assertions.
//
//	}
type MockGetBalanceRepo struct {
	// GetBalanceFunc mocks the GetBalance method.
	GetBalanceFunc func(ctx context.Context, userId uuid.UUID) (objects.Balance, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetBalance holds details about calls to the GetBalance method.
		GetBalance []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserId is the userId argument value.
			UserId uuid.UUID
		}
	}
	lockGetBalance sync.RWMutex
}

// GetBalance calls GetBalanceFunc.
func (mock *MockGetBalanceRepo) GetBalance(ctx context.Context, userId uuid.UUID) (objects.Balance, error) {
	if mock.GetBalanceFunc == nil {
		panic("MockGetBalanceRepo.GetBalanceFunc: method is nil but GetBalanceRepo.GetBalance was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserId uuid.UUID
	}{
		Ctx:    ctx,
		UserId: userId,
	}
	mock.lockGetBalance.Lock()
	mock.calls.GetBalance = append(mock.calls.GetBalance, callInfo)
	mock.lockGetBalance.Unlock()
	return mock.GetBalanceFunc(ctx, userId)
}

// GetBalanceCalls gets all the calls that were made to GetBalance.
// Check the length with:
//
//	len(mockedGetBalanceRepo.GetBalanceCalls())
func (mock *MockGetBalanceRepo) GetBalanceCalls() []struct {
	Ctx    context.Context
	UserId uuid.UUID
} {
	var calls []struct {
		Ctx    context.Context
		UserId uuid.UUID
	}
	mock.lockGetBalance.RLock()
	calls = mock.calls.GetBalance
	mock.lockGetBalance.RUnlock()
	return calls
}

// Ensure that MockGetWithdrawalsRepo does implement GetWithdrawalsRepo.
// If this is not the case, regenerate this file with mockery.
var _ GetWithdrawalsRepo = &MockGetWithdrawalsRepo{}

// MockGetWithdrawalsRepo is a mock implementation of GetWithdrawalsRepo.
//
//	func TestSomethingThatUsesGetWithdrawalsRepo(t *testing.T) {
//
//		// make and configure a mocked GetWithdrawalsRepo
//		mockedGetWithdrawalsRepo := &MockGetWithdrawalsRepo{
//			GetWithdrawalsFunc: func(ctx context.Context, userId uuid.UUID, offset int32, limit int32) ([]entities.Transaction, error) {
//				panic("mock out the GetWithdrawals method")
//			},
//		}
//
//		// use mockedGetWithdrawalsRepo in code that requires GetWithdrawalsRepo
//		// and then make assertions.
//
//	}
type MockGetWithdrawalsRepo struct {
	// GetWithdrawalsFunc mocks the GetWithdrawals method.
	GetWithdrawalsFunc func(ctx context.Context, userId uuid.UUID, offset int32, limit int32) ([]entities.Transaction, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetWithdrawals holds details about calls to the GetWithdrawals method.
		GetWithdrawals []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserId is the userId argument value.
			UserId uuid.UUID
			// Offset is the offset argument value.
			Offset int32
			// Limit is the limit argument value.
			Limit int32
		}
	}
	lockGetWithdrawals sync.RWMutex
}

// GetWithdrawals calls GetWithdrawalsFunc.
func (mock *MockGetWithdrawalsRepo) GetWithdrawals(ctx context.Context, userId uuid.UUID, offset int32, limit int32) ([]entities.Transaction, error) {
	if mock.GetWithdrawalsFunc == nil {
		panic("MockGetWithdrawalsRepo.GetWithdrawalsFunc: method is nil but GetWithdrawalsRepo.GetWithdrawals was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserId uuid.UUID
		Offset int32
		Limit  int32
	}{
		Ctx:    ctx,
		UserId: userId,
		Offset: offset,
		Limit:  limit,
	}
	mock.lockGetWithdrawals.Lock()
	mock.calls.GetWithdrawals = append(mock.calls.GetWithdrawals, callInfo)
	mock.lockGetWithdrawals.Unlock()
	return mock.GetWithdrawalsFunc(ctx, userId, offset, limit)
}

// GetWithdrawalsCalls gets all the calls that were made to GetWithdrawals.
// Check the length with:
//
//	len(mockedGetWithdrawalsRepo.GetWithdrawalsCalls())
func (mock *MockGetWithdrawalsRepo) GetWithdrawalsCalls() []struct {
	Ctx    context.Context
	UserId uuid.UUID
	Offset int32
	Limit  int32
} {
	var calls []struct {
		Ctx    context.Context
		UserId uuid.UUID
		Offset int32
		Limit  int32
	}
	mock.lockGetWithdrawals.RLock()
	calls = mock.calls.GetWithdrawals
	mock.lockGetWithdrawals.RUnlock()
	return calls
}

// Ensure that MockAdjustBalanceRepo does implement AdjustBalanceRepo.
// If this is not the case, regenerate this file with mockery.
var _ AdjustBalanceRepo = &MockAdjustBalanceRepo{}

// MockAdjustBalanceRepo is a mock implementation of AdjustBalanceRepo.
//
//	func TestSomethingThatUsesAdjustBalanceRepo(t *testing.T) {
//
//		// make and configure a mocked AdjustBalanceRepo
//		mockedAdjustBalanceRepo := &MockAdjustBalanceRepo{
//			AdjustBalanceFunc: func(ctx context.Context, userId uuid.UUID, orderNumber objects.OrderNumber, operation objects.Operation, amount objects.Amount, updatedAt time.Time) error {
//				panic("mock out the AdjustBalance method")
//			},
//		}
//
//		// use mockedAdjustBalanceRepo in code that requires AdjustBalanceRepo
//		// and then make assertions.
//
//	}
type MockAdjustBalanceRepo struct {
	// AdjustBalanceFunc mocks the AdjustBalance method.
	AdjustBalanceFunc func(ctx context.Context, userId uuid.UUID, orderNumber objects.OrderNumber, operation objects.Operation, amount objects.Amount, updatedAt time.Time) error

	// calls tracks calls to the methods.
	calls struct {
		// AdjustBalance holds details about calls to the AdjustBalance method.
		AdjustBalance []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserId is the userId argument value.
			UserId uuid.UUID
			// OrderNumber is the orderNumber argument value.
			OrderNumber objects.OrderNumber
			// Operation is the operation argument value.
			Operation objects.Operation
			// Amount is the amount argument value.
			Amount objects.Amount
			// UpdatedAt is the updatedAt argument value.
			UpdatedAt time.Time
		}
	}
	lockAdjustBalance sync.RWMutex
}

// AdjustBalance calls AdjustBalanceFunc.
func (mock *MockAdjustBalanceRepo) AdjustBalance(ctx context.Context, userId uuid.UUID, orderNumber objects.OrderNumber, operation objects.Operation, amount objects.Amount, updatedAt time.Time) error {
	if mock.AdjustBalanceFunc == nil {
		panic("MockAdjustBalanceRepo.AdjustBalanceFunc: method is nil but AdjustBalanceRepo.AdjustBalance was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		UserId      uuid.UUID
		OrderNumber objects.OrderNumber
		Operation   objects.Operation
		Amount      objects.Amount
		UpdatedAt   time.Time
	}{
		Ctx:         ctx,
		UserId:      userId,
		OrderNumber: orderNumber,
		Operation:   operation,
		Amount:      amount,
		UpdatedAt:   updatedAt,
	}
	mock.lockAdjustBalance.Lock()
	mock.calls.AdjustBalance = append(mock.calls.AdjustBalance, callInfo)
	mock.lockAdjustBalance.Unlock()
	return mock.AdjustBalanceFunc(ctx, userId, orderNumber, operation, amount, updatedAt)
}

// AdjustBalanceCalls gets all the calls that were made to AdjustBalance.
// Check the length with:
//
//	len(mockedAdjustBalanceRepo.AdjustBalanceCalls())
func (mock *MockAdjustBalanceRepo) AdjustBalanceCalls() []struct {
	Ctx         context.Context
	UserId      uuid.UUID
	OrderNumber objects.OrderNumber
	Operation   objects.Operation
	Amount      objects.Amount
	UpdatedAt   time.Time
} {
	var calls []struct {
		Ctx         context.Context
		UserId      uuid.UUID
		OrderNumber objects.OrderNumber
		Operation   objects.Operation
		Amount      objects.Amount
		UpdatedAt   time.Time
	}
	mock.lockAdjustBalance.RLock()
	calls = mock.calls.AdjustBalance
	mock.lockAdjustBalance.RUnlock()
	return calls
}
