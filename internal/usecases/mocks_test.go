// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package usecases

import (
	"context"
	"sync"
	"time"

	"github.com/PiskarevSA/minimarket-points/internal/domain/entities"
	"github.com/PiskarevSA/minimarket-points/internal/domain/objects"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5"
)

// Ensure that MockGetBalanceRepo does implement GetBalanceRepo.
// If this is not the case, regenerate this file with mockery.
var _ GetBalanceRepo = &MockGetBalanceRepo{}

// MockGetBalanceRepo is a mock implementation of GetBalanceRepo.
//
//	func TestSomethingThatUsesGetBalanceRepo(t *testing.T) {
//
//		// make and configure a mocked GetBalanceRepo
//		mockedGetBalanceRepo := &MockGetBalanceRepo{
//			GetBalanceFunc: func(ctx context.Context, userId uuid.UUID) (objects.Balance, error) {
//				panic("mock out the GetBalance method")
//			},
//		}
//
//		// use mockedGetBalanceRepo in code that requires GetBalanceRepo
//		// and then make assertions.
//
//	}
type MockGetBalanceRepo struct {
	// GetBalanceFunc mocks the GetBalance method.
	GetBalanceFunc func(ctx context.Context, userId uuid.UUID) (objects.Balance, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetBalance holds details about calls to the GetBalance method.
		GetBalance []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserId is the userId argument value.
			UserId uuid.UUID
		}
	}
	lockGetBalance sync.RWMutex
}

// GetBalance calls GetBalanceFunc.
func (mock *MockGetBalanceRepo) GetBalance(ctx context.Context, userId uuid.UUID) (objects.Balance, error) {
	if mock.GetBalanceFunc == nil {
		panic("MockGetBalanceRepo.GetBalanceFunc: method is nil but GetBalanceRepo.GetBalance was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserId uuid.UUID
	}{
		Ctx:    ctx,
		UserId: userId,
	}
	mock.lockGetBalance.Lock()
	mock.calls.GetBalance = append(mock.calls.GetBalance, callInfo)
	mock.lockGetBalance.Unlock()
	return mock.GetBalanceFunc(ctx, userId)
}

// GetBalanceCalls gets all the calls that were made to GetBalance.
// Check the length with:
//
//	len(mockedGetBalanceRepo.GetBalanceCalls())
func (mock *MockGetBalanceRepo) GetBalanceCalls() []struct {
	Ctx    context.Context
	UserId uuid.UUID
} {
	var calls []struct {
		Ctx    context.Context
		UserId uuid.UUID
	}
	mock.lockGetBalance.RLock()
	calls = mock.calls.GetBalance
	mock.lockGetBalance.RUnlock()
	return calls
}

// Ensure that MockGetWithdrawalsRepo does implement GetWithdrawalsRepo.
// If this is not the case, regenerate this file with mockery.
var _ GetWithdrawalsRepo = &MockGetWithdrawalsRepo{}

// MockGetWithdrawalsRepo is a mock implementation of GetWithdrawalsRepo.
//
//	func TestSomethingThatUsesGetWithdrawalsRepo(t *testing.T) {
//
//		// make and configure a mocked GetWithdrawalsRepo
//		mockedGetWithdrawalsRepo := &MockGetWithdrawalsRepo{
//			GetWithdrawalsFunc: func(ctx context.Context, userId uuid.UUID, offset int32, limit int32) ([]entities.Transaction, error) {
//				panic("mock out the GetWithdrawals method")
//			},
//		}
//
//		// use mockedGetWithdrawalsRepo in code that requires GetWithdrawalsRepo
//		// and then make assertions.
//
//	}
type MockGetWithdrawalsRepo struct {
	// GetWithdrawalsFunc mocks the GetWithdrawals method.
	GetWithdrawalsFunc func(ctx context.Context, userId uuid.UUID, offset int32, limit int32) ([]entities.Transaction, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetWithdrawals holds details about calls to the GetWithdrawals method.
		GetWithdrawals []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserId is the userId argument value.
			UserId uuid.UUID
			// Offset is the offset argument value.
			Offset int32
			// Limit is the limit argument value.
			Limit int32
		}
	}
	lockGetWithdrawals sync.RWMutex
}

// GetWithdrawals calls GetWithdrawalsFunc.
func (mock *MockGetWithdrawalsRepo) GetWithdrawals(ctx context.Context, userId uuid.UUID, offset int32, limit int32) ([]entities.Transaction, error) {
	if mock.GetWithdrawalsFunc == nil {
		panic("MockGetWithdrawalsRepo.GetWithdrawalsFunc: method is nil but GetWithdrawalsRepo.GetWithdrawals was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserId uuid.UUID
		Offset int32
		Limit  int32
	}{
		Ctx:    ctx,
		UserId: userId,
		Offset: offset,
		Limit:  limit,
	}
	mock.lockGetWithdrawals.Lock()
	mock.calls.GetWithdrawals = append(mock.calls.GetWithdrawals, callInfo)
	mock.lockGetWithdrawals.Unlock()
	return mock.GetWithdrawalsFunc(ctx, userId, offset, limit)
}

// GetWithdrawalsCalls gets all the calls that were made to GetWithdrawals.
// Check the length with:
//
//	len(mockedGetWithdrawalsRepo.GetWithdrawalsCalls())
func (mock *MockGetWithdrawalsRepo) GetWithdrawalsCalls() []struct {
	Ctx    context.Context
	UserId uuid.UUID
	Offset int32
	Limit  int32
} {
	var calls []struct {
		Ctx    context.Context
		UserId uuid.UUID
		Offset int32
		Limit  int32
	}
	mock.lockGetWithdrawals.RLock()
	calls = mock.calls.GetWithdrawals
	mock.lockGetWithdrawals.RUnlock()
	return calls
}

// Ensure that MockTransactor does implement Transactor.
// If this is not the case, regenerate this file with mockery.
var _ Transactor = &MockTransactor{}

// MockTransactor is a mock implementation of Transactor.
//
//	func TestSomethingThatUsesTransactor(t *testing.T) {
//
//		// make and configure a mocked Transactor
//		mockedTransactor := &MockTransactor{
//			TransactFunc: func(ctx context.Context, opts pgx.TxOptions, fn func(ctx context.Context) error) error {
//				panic("mock out the Transact method")
//			},
//		}
//
//		// use mockedTransactor in code that requires Transactor
//		// and then make assertions.
//
//	}
type MockTransactor struct {
	// TransactFunc mocks the Transact method.
	TransactFunc func(ctx context.Context, opts pgx.TxOptions, fn func(ctx context.Context) error) error

	// calls tracks calls to the methods.
	calls struct {
		// Transact holds details about calls to the Transact method.
		Transact []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Opts is the opts argument value.
			Opts pgx.TxOptions
			// Fn is the fn argument value.
			Fn func(ctx context.Context) error
		}
	}
	lockTransact sync.RWMutex
}

// Transact calls TransactFunc.
func (mock *MockTransactor) Transact(ctx context.Context, opts pgx.TxOptions, fn func(ctx context.Context) error) error {
	if mock.TransactFunc == nil {
		panic("MockTransactor.TransactFunc: method is nil but Transactor.Transact was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Opts pgx.TxOptions
		Fn   func(ctx context.Context) error
	}{
		Ctx:  ctx,
		Opts: opts,
		Fn:   fn,
	}
	mock.lockTransact.Lock()
	mock.calls.Transact = append(mock.calls.Transact, callInfo)
	mock.lockTransact.Unlock()
	return mock.TransactFunc(ctx, opts, fn)
}

// TransactCalls gets all the calls that were made to Transact.
// Check the length with:
//
//	len(mockedTransactor.TransactCalls())
func (mock *MockTransactor) TransactCalls() []struct {
	Ctx  context.Context
	Opts pgx.TxOptions
	Fn   func(ctx context.Context) error
} {
	var calls []struct {
		Ctx  context.Context
		Opts pgx.TxOptions
		Fn   func(ctx context.Context) error
	}
	mock.lockTransact.RLock()
	calls = mock.calls.Transact
	mock.lockTransact.RUnlock()
	return calls
}

// Ensure that MockAdjustBalanceInRepo does implement AdjustBalanceInRepo.
// If this is not the case, regenerate this file with mockery.
var _ AdjustBalanceInRepo = &MockAdjustBalanceInRepo{}

// MockAdjustBalanceInRepo is a mock implementation of AdjustBalanceInRepo.
//
//	func TestSomethingThatUsesAdjustBalanceInRepo(t *testing.T) {
//
//		// make and configure a mocked AdjustBalanceInRepo
//		mockedAdjustBalanceInRepo := &MockAdjustBalanceInRepo{
//			AdjustBalanceInTxFunc: func(ctx context.Context, userId uuid.UUID, orderNumber objects.OrderNumber, operation objects.Operation, amount objects.Amount, updatedAt time.Time) error {
//				panic("mock out the AdjustBalanceInTx method")
//			},
//		}
//
//		// use mockedAdjustBalanceInRepo in code that requires AdjustBalanceInRepo
//		// and then make assertions.
//
//	}
type MockAdjustBalanceInRepo struct {
	// AdjustBalanceInTxFunc mocks the AdjustBalanceInTx method.
	AdjustBalanceInTxFunc func(ctx context.Context, userId uuid.UUID, orderNumber objects.OrderNumber, operation objects.Operation, amount objects.Amount, updatedAt time.Time) error

	// calls tracks calls to the methods.
	calls struct {
		// AdjustBalanceInTx holds details about calls to the AdjustBalanceInTx method.
		AdjustBalanceInTx []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserId is the userId argument value.
			UserId uuid.UUID
			// OrderNumber is the orderNumber argument value.
			OrderNumber objects.OrderNumber
			// Operation is the operation argument value.
			Operation objects.Operation
			// Amount is the amount argument value.
			Amount objects.Amount
			// UpdatedAt is the updatedAt argument value.
			UpdatedAt time.Time
		}
	}
	lockAdjustBalanceInTx sync.RWMutex
}

// AdjustBalanceInTx calls AdjustBalanceInTxFunc.
func (mock *MockAdjustBalanceInRepo) AdjustBalanceInTx(ctx context.Context, userId uuid.UUID, orderNumber objects.OrderNumber, operation objects.Operation, amount objects.Amount, updatedAt time.Time) error {
	if mock.AdjustBalanceInTxFunc == nil {
		panic("MockAdjustBalanceInRepo.AdjustBalanceInTxFunc: method is nil but AdjustBalanceInRepo.AdjustBalanceInTx was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		UserId      uuid.UUID
		OrderNumber objects.OrderNumber
		Operation   objects.Operation
		Amount      objects.Amount
		UpdatedAt   time.Time
	}{
		Ctx:         ctx,
		UserId:      userId,
		OrderNumber: orderNumber,
		Operation:   operation,
		Amount:      amount,
		UpdatedAt:   updatedAt,
	}
	mock.lockAdjustBalanceInTx.Lock()
	mock.calls.AdjustBalanceInTx = append(mock.calls.AdjustBalanceInTx, callInfo)
	mock.lockAdjustBalanceInTx.Unlock()
	return mock.AdjustBalanceInTxFunc(ctx, userId, orderNumber, operation, amount, updatedAt)
}

// AdjustBalanceInTxCalls gets all the calls that were made to AdjustBalanceInTx.
// Check the length with:
//
//	len(mockedAdjustBalanceInRepo.AdjustBalanceInTxCalls())
func (mock *MockAdjustBalanceInRepo) AdjustBalanceInTxCalls() []struct {
	Ctx         context.Context
	UserId      uuid.UUID
	OrderNumber objects.OrderNumber
	Operation   objects.Operation
	Amount      objects.Amount
	UpdatedAt   time.Time
} {
	var calls []struct {
		Ctx         context.Context
		UserId      uuid.UUID
		OrderNumber objects.OrderNumber
		Operation   objects.Operation
		Amount      objects.Amount
		UpdatedAt   time.Time
	}
	mock.lockAdjustBalanceInTx.RLock()
	calls = mock.calls.AdjustBalanceInTx
	mock.lockAdjustBalanceInTx.RUnlock()
	return calls
}

// Ensure that MockCreateTransactionRepo does implement CreateTransactionRepo.
// If this is not the case, regenerate this file with mockery.
var _ CreateTransactionRepo = &MockCreateTransactionRepo{}

// MockCreateTransactionRepo is a mock implementation of CreateTransactionRepo.
//
//	func TestSomethingThatUsesCreateTransactionRepo(t *testing.T) {
//
//		// make and configure a mocked CreateTransactionRepo
//		mockedCreateTransactionRepo := &MockCreateTransactionRepo{
//			CreateTransactionInTxFunc: func(ctx context.Context, userId uuid.UUID, orderNumber objects.OrderNumber, operation objects.Operation, amount objects.Amount, timestamp time.Time) error {
//				panic("mock out the CreateTransactionInTx method")
//			},
//		}
//
//		// use mockedCreateTransactionRepo in code that requires CreateTransactionRepo
//		// and then make assertions.
//
//	}
type MockCreateTransactionRepo struct {
	// CreateTransactionInTxFunc mocks the CreateTransactionInTx method.
	CreateTransactionInTxFunc func(ctx context.Context, userId uuid.UUID, orderNumber objects.OrderNumber, operation objects.Operation, amount objects.Amount, timestamp time.Time) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateTransactionInTx holds details about calls to the CreateTransactionInTx method.
		CreateTransactionInTx []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserId is the userId argument value.
			UserId uuid.UUID
			// OrderNumber is the orderNumber argument value.
			OrderNumber objects.OrderNumber
			// Operation is the operation argument value.
			Operation objects.Operation
			// Amount is the amount argument value.
			Amount objects.Amount
			// Timestamp is the timestamp argument value.
			Timestamp time.Time
		}
	}
	lockCreateTransactionInTx sync.RWMutex
}

// CreateTransactionInTx calls CreateTransactionInTxFunc.
func (mock *MockCreateTransactionRepo) CreateTransactionInTx(ctx context.Context, userId uuid.UUID, orderNumber objects.OrderNumber, operation objects.Operation, amount objects.Amount, timestamp time.Time) error {
	if mock.CreateTransactionInTxFunc == nil {
		panic("MockCreateTransactionRepo.CreateTransactionInTxFunc: method is nil but CreateTransactionRepo.CreateTransactionInTx was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		UserId      uuid.UUID
		OrderNumber objects.OrderNumber
		Operation   objects.Operation
		Amount      objects.Amount
		Timestamp   time.Time
	}{
		Ctx:         ctx,
		UserId:      userId,
		OrderNumber: orderNumber,
		Operation:   operation,
		Amount:      amount,
		Timestamp:   timestamp,
	}
	mock.lockCreateTransactionInTx.Lock()
	mock.calls.CreateTransactionInTx = append(mock.calls.CreateTransactionInTx, callInfo)
	mock.lockCreateTransactionInTx.Unlock()
	return mock.CreateTransactionInTxFunc(ctx, userId, orderNumber, operation, amount, timestamp)
}

// CreateTransactionInTxCalls gets all the calls that were made to CreateTransactionInTx.
// Check the length with:
//
//	len(mockedCreateTransactionRepo.CreateTransactionInTxCalls())
func (mock *MockCreateTransactionRepo) CreateTransactionInTxCalls() []struct {
	Ctx         context.Context
	UserId      uuid.UUID
	OrderNumber objects.OrderNumber
	Operation   objects.Operation
	Amount      objects.Amount
	Timestamp   time.Time
} {
	var calls []struct {
		Ctx         context.Context
		UserId      uuid.UUID
		OrderNumber objects.OrderNumber
		Operation   objects.Operation
		Amount      objects.Amount
		Timestamp   time.Time
	}
	mock.lockCreateTransactionInTx.RLock()
	calls = mock.calls.CreateTransactionInTx
	mock.lockCreateTransactionInTx.RUnlock()
	return calls
}

// Ensure that MockWithdrawRepo does implement WithdrawRepo.
// If this is not the case, regenerate this file with mockery.
var _ WithdrawRepo = &MockWithdrawRepo{}

// MockWithdrawRepo is a mock implementation of WithdrawRepo.
//
//	func TestSomethingThatUsesWithdrawRepo(t *testing.T) {
//
//		// make and configure a mocked WithdrawRepo
//		mockedWithdrawRepo := &MockWithdrawRepo{
//			AdjustBalanceInTxFunc: func(ctx context.Context, userId uuid.UUID, orderNumber objects.OrderNumber, operation objects.Operation, amount objects.Amount, updatedAt time.Time) error {
//				panic("mock out the AdjustBalanceInTx method")
//			},
//			CreateTransactionInTxFunc: func(ctx context.Context, userId uuid.UUID, orderNumber objects.OrderNumber, operation objects.Operation, amount objects.Amount, timestamp time.Time) error {
//				panic("mock out the CreateTransactionInTx method")
//			},
//		}
//
//		// use mockedWithdrawRepo in code that requires WithdrawRepo
//		// and then make assertions.
//
//	}
type MockWithdrawRepo struct {
	// AdjustBalanceInTxFunc mocks the AdjustBalanceInTx method.
	AdjustBalanceInTxFunc func(ctx context.Context, userId uuid.UUID, orderNumber objects.OrderNumber, operation objects.Operation, amount objects.Amount, updatedAt time.Time) error

	// CreateTransactionInTxFunc mocks the CreateTransactionInTx method.
	CreateTransactionInTxFunc func(ctx context.Context, userId uuid.UUID, orderNumber objects.OrderNumber, operation objects.Operation, amount objects.Amount, timestamp time.Time) error

	// calls tracks calls to the methods.
	calls struct {
		// AdjustBalanceInTx holds details about calls to the AdjustBalanceInTx method.
		AdjustBalanceInTx []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserId is the userId argument value.
			UserId uuid.UUID
			// OrderNumber is the orderNumber argument value.
			OrderNumber objects.OrderNumber
			// Operation is the operation argument value.
			Operation objects.Operation
			// Amount is the amount argument value.
			Amount objects.Amount
			// UpdatedAt is the updatedAt argument value.
			UpdatedAt time.Time
		}
		// CreateTransactionInTx holds details about calls to the CreateTransactionInTx method.
		CreateTransactionInTx []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserId is the userId argument value.
			UserId uuid.UUID
			// OrderNumber is the orderNumber argument value.
			OrderNumber objects.OrderNumber
			// Operation is the operation argument value.
			Operation objects.Operation
			// Amount is the amount argument value.
			Amount objects.Amount
			// Timestamp is the timestamp argument value.
			Timestamp time.Time
		}
	}
	lockAdjustBalanceInTx     sync.RWMutex
	lockCreateTransactionInTx sync.RWMutex
}

// AdjustBalanceInTx calls AdjustBalanceInTxFunc.
func (mock *MockWithdrawRepo) AdjustBalanceInTx(ctx context.Context, userId uuid.UUID, orderNumber objects.OrderNumber, operation objects.Operation, amount objects.Amount, updatedAt time.Time) error {
	if mock.AdjustBalanceInTxFunc == nil {
		panic("MockWithdrawRepo.AdjustBalanceInTxFunc: method is nil but WithdrawRepo.AdjustBalanceInTx was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		UserId      uuid.UUID
		OrderNumber objects.OrderNumber
		Operation   objects.Operation
		Amount      objects.Amount
		UpdatedAt   time.Time
	}{
		Ctx:         ctx,
		UserId:      userId,
		OrderNumber: orderNumber,
		Operation:   operation,
		Amount:      amount,
		UpdatedAt:   updatedAt,
	}
	mock.lockAdjustBalanceInTx.Lock()
	mock.calls.AdjustBalanceInTx = append(mock.calls.AdjustBalanceInTx, callInfo)
	mock.lockAdjustBalanceInTx.Unlock()
	return mock.AdjustBalanceInTxFunc(ctx, userId, orderNumber, operation, amount, updatedAt)
}

// AdjustBalanceInTxCalls gets all the calls that were made to AdjustBalanceInTx.
// Check the length with:
//
//	len(mockedWithdrawRepo.AdjustBalanceInTxCalls())
func (mock *MockWithdrawRepo) AdjustBalanceInTxCalls() []struct {
	Ctx         context.Context
	UserId      uuid.UUID
	OrderNumber objects.OrderNumber
	Operation   objects.Operation
	Amount      objects.Amount
	UpdatedAt   time.Time
} {
	var calls []struct {
		Ctx         context.Context
		UserId      uuid.UUID
		OrderNumber objects.OrderNumber
		Operation   objects.Operation
		Amount      objects.Amount
		UpdatedAt   time.Time
	}
	mock.lockAdjustBalanceInTx.RLock()
	calls = mock.calls.AdjustBalanceInTx
	mock.lockAdjustBalanceInTx.RUnlock()
	return calls
}

// CreateTransactionInTx calls CreateTransactionInTxFunc.
func (mock *MockWithdrawRepo) CreateTransactionInTx(ctx context.Context, userId uuid.UUID, orderNumber objects.OrderNumber, operation objects.Operation, amount objects.Amount, timestamp time.Time) error {
	if mock.CreateTransactionInTxFunc == nil {
		panic("MockWithdrawRepo.CreateTransactionInTxFunc: method is nil but WithdrawRepo.CreateTransactionInTx was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		UserId      uuid.UUID
		OrderNumber objects.OrderNumber
		Operation   objects.Operation
		Amount      objects.Amount
		Timestamp   time.Time
	}{
		Ctx:         ctx,
		UserId:      userId,
		OrderNumber: orderNumber,
		Operation:   operation,
		Amount:      amount,
		Timestamp:   timestamp,
	}
	mock.lockCreateTransactionInTx.Lock()
	mock.calls.CreateTransactionInTx = append(mock.calls.CreateTransactionInTx, callInfo)
	mock.lockCreateTransactionInTx.Unlock()
	return mock.CreateTransactionInTxFunc(ctx, userId, orderNumber, operation, amount, timestamp)
}

// CreateTransactionInTxCalls gets all the calls that were made to CreateTransactionInTx.
// Check the length with:
//
//	len(mockedWithdrawRepo.CreateTransactionInTxCalls())
func (mock *MockWithdrawRepo) CreateTransactionInTxCalls() []struct {
	Ctx         context.Context
	UserId      uuid.UUID
	OrderNumber objects.OrderNumber
	Operation   objects.Operation
	Amount      objects.Amount
	Timestamp   time.Time
} {
	var calls []struct {
		Ctx         context.Context
		UserId      uuid.UUID
		OrderNumber objects.OrderNumber
		Operation   objects.Operation
		Amount      objects.Amount
		Timestamp   time.Time
	}
	mock.lockCreateTransactionInTx.RLock()
	calls = mock.calls.CreateTransactionInTx
	mock.lockCreateTransactionInTx.RUnlock()
	return calls
}
