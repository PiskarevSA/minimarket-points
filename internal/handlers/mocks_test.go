// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package handlers

import (
	"context"
	"sync"
	"time"

	"github.com/PiskarevSA/minimarket-points/internal/domain/entities"
	"github.com/PiskarevSA/minimarket-points/internal/domain/objects"
	"github.com/google/uuid"
)

// Ensure that MockDepositUsecase does implement DepositUsecase.
// If this is not the case, regenerate this file with mockery.
var _ DepositUsecase = &MockDepositUsecase{}

// MockDepositUsecase is a mock implementation of DepositUsecase.
//
//	func TestSomethingThatUsesDepositUsecase(t *testing.T) {
//
//		// make and configure a mocked DepositUsecase
//		mockedDepositUsecase := &MockDepositUsecase{
//			DoFunc: func(ctx context.Context, userId uuid.UUID, orderNumber *string, amount string) (time.Time, error) {
//				panic("mock out the Do method")
//			},
//		}
//
//		// use mockedDepositUsecase in code that requires DepositUsecase
//		// and then make assertions.
//
//	}
type MockDepositUsecase struct {
	// DoFunc mocks the Do method.
	DoFunc func(ctx context.Context, userId uuid.UUID, orderNumber *string, amount string) (time.Time, error)

	// calls tracks calls to the methods.
	calls struct {
		// Do holds details about calls to the Do method.
		Do []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserId is the userId argument value.
			UserId uuid.UUID
			// OrderNumber is the orderNumber argument value.
			OrderNumber *string
			// Amount is the amount argument value.
			Amount string
		}
	}
	lockDo sync.RWMutex
}

// Do calls DoFunc.
func (mock *MockDepositUsecase) Do(ctx context.Context, userId uuid.UUID, orderNumber *string, amount string) (time.Time, error) {
	if mock.DoFunc == nil {
		panic("MockDepositUsecase.DoFunc: method is nil but DepositUsecase.Do was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		UserId      uuid.UUID
		OrderNumber *string
		Amount      string
	}{
		Ctx:         ctx,
		UserId:      userId,
		OrderNumber: orderNumber,
		Amount:      amount,
	}
	mock.lockDo.Lock()
	mock.calls.Do = append(mock.calls.Do, callInfo)
	mock.lockDo.Unlock()
	return mock.DoFunc(ctx, userId, orderNumber, amount)
}

// DoCalls gets all the calls that were made to Do.
// Check the length with:
//
//	len(mockedDepositUsecase.DoCalls())
func (mock *MockDepositUsecase) DoCalls() []struct {
	Ctx         context.Context
	UserId      uuid.UUID
	OrderNumber *string
	Amount      string
} {
	var calls []struct {
		Ctx         context.Context
		UserId      uuid.UUID
		OrderNumber *string
		Amount      string
	}
	mock.lockDo.RLock()
	calls = mock.calls.Do
	mock.lockDo.RUnlock()
	return calls
}

// Ensure that MockWithdrawUsecase does implement WithdrawUsecase.
// If this is not the case, regenerate this file with mockery.
var _ WithdrawUsecase = &MockWithdrawUsecase{}

// MockWithdrawUsecase is a mock implementation of WithdrawUsecase.
//
//	func TestSomethingThatUsesWithdrawUsecase(t *testing.T) {
//
//		// make and configure a mocked WithdrawUsecase
//		mockedWithdrawUsecase := &MockWithdrawUsecase{
//			DoFunc: func(ctx context.Context, userId uuid.UUID, orderNumber string, amount string) (time.Time, error) {
//				panic("mock out the Do method")
//			},
//		}
//
//		// use mockedWithdrawUsecase in code that requires WithdrawUsecase
//		// and then make assertions.
//
//	}
type MockWithdrawUsecase struct {
	// DoFunc mocks the Do method.
	DoFunc func(ctx context.Context, userId uuid.UUID, orderNumber string, amount string) (time.Time, error)

	// calls tracks calls to the methods.
	calls struct {
		// Do holds details about calls to the Do method.
		Do []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserId is the userId argument value.
			UserId uuid.UUID
			// OrderNumber is the orderNumber argument value.
			OrderNumber string
			// Amount is the amount argument value.
			Amount string
		}
	}
	lockDo sync.RWMutex
}

// Do calls DoFunc.
func (mock *MockWithdrawUsecase) Do(ctx context.Context, userId uuid.UUID, orderNumber string, amount string) (time.Time, error) {
	if mock.DoFunc == nil {
		panic("MockWithdrawUsecase.DoFunc: method is nil but WithdrawUsecase.Do was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		UserId      uuid.UUID
		OrderNumber string
		Amount      string
	}{
		Ctx:         ctx,
		UserId:      userId,
		OrderNumber: orderNumber,
		Amount:      amount,
	}
	mock.lockDo.Lock()
	mock.calls.Do = append(mock.calls.Do, callInfo)
	mock.lockDo.Unlock()
	return mock.DoFunc(ctx, userId, orderNumber, amount)
}

// DoCalls gets all the calls that were made to Do.
// Check the length with:
//
//	len(mockedWithdrawUsecase.DoCalls())
func (mock *MockWithdrawUsecase) DoCalls() []struct {
	Ctx         context.Context
	UserId      uuid.UUID
	OrderNumber string
	Amount      string
} {
	var calls []struct {
		Ctx         context.Context
		UserId      uuid.UUID
		OrderNumber string
		Amount      string
	}
	mock.lockDo.RLock()
	calls = mock.calls.Do
	mock.lockDo.RUnlock()
	return calls
}

// Ensure that MockGetBalanceUsecase does implement GetBalanceUsecase.
// If this is not the case, regenerate this file with mockery.
var _ GetBalanceUsecase = &MockGetBalanceUsecase{}

// MockGetBalanceUsecase is a mock implementation of GetBalanceUsecase.
//
//	func TestSomethingThatUsesGetBalanceUsecase(t *testing.T) {
//
//		// make and configure a mocked GetBalanceUsecase
//		mockedGetBalanceUsecase := &MockGetBalanceUsecase{
//			DoFunc: func(ctx context.Context, userId uuid.UUID) (objects.Balance, error) {
//				panic("mock out the Do method")
//			},
//		}
//
//		// use mockedGetBalanceUsecase in code that requires GetBalanceUsecase
//		// and then make assertions.
//
//	}
type MockGetBalanceUsecase struct {
	// DoFunc mocks the Do method.
	DoFunc func(ctx context.Context, userId uuid.UUID) (objects.Balance, error)

	// calls tracks calls to the methods.
	calls struct {
		// Do holds details about calls to the Do method.
		Do []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserId is the userId argument value.
			UserId uuid.UUID
		}
	}
	lockDo sync.RWMutex
}

// Do calls DoFunc.
func (mock *MockGetBalanceUsecase) Do(ctx context.Context, userId uuid.UUID) (objects.Balance, error) {
	if mock.DoFunc == nil {
		panic("MockGetBalanceUsecase.DoFunc: method is nil but GetBalanceUsecase.Do was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserId uuid.UUID
	}{
		Ctx:    ctx,
		UserId: userId,
	}
	mock.lockDo.Lock()
	mock.calls.Do = append(mock.calls.Do, callInfo)
	mock.lockDo.Unlock()
	return mock.DoFunc(ctx, userId)
}

// DoCalls gets all the calls that were made to Do.
// Check the length with:
//
//	len(mockedGetBalanceUsecase.DoCalls())
func (mock *MockGetBalanceUsecase) DoCalls() []struct {
	Ctx    context.Context
	UserId uuid.UUID
} {
	var calls []struct {
		Ctx    context.Context
		UserId uuid.UUID
	}
	mock.lockDo.RLock()
	calls = mock.calls.Do
	mock.lockDo.RUnlock()
	return calls
}

// Ensure that MockGetWithdrawalsUsecase does implement GetWithdrawalsUsecase.
// If this is not the case, regenerate this file with mockery.
var _ GetWithdrawalsUsecase = &MockGetWithdrawalsUsecase{}

// MockGetWithdrawalsUsecase is a mock implementation of GetWithdrawalsUsecase.
//
//	func TestSomethingThatUsesGetWithdrawalsUsecase(t *testing.T) {
//
//		// make and configure a mocked GetWithdrawalsUsecase
//		mockedGetWithdrawalsUsecase := &MockGetWithdrawalsUsecase{
//			DoFunc: func(ctx context.Context, userId uuid.UUID, offset *int32, limit *int32) ([]entities.Transaction, error) {
//				panic("mock out the Do method")
//			},
//		}
//
//		// use mockedGetWithdrawalsUsecase in code that requires GetWithdrawalsUsecase
//		// and then make assertions.
//
//	}
type MockGetWithdrawalsUsecase struct {
	// DoFunc mocks the Do method.
	DoFunc func(ctx context.Context, userId uuid.UUID, offset *int32, limit *int32) ([]entities.Transaction, error)

	// calls tracks calls to the methods.
	calls struct {
		// Do holds details about calls to the Do method.
		Do []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserId is the userId argument value.
			UserId uuid.UUID
			// Offset is the offset argument value.
			Offset *int32
			// Limit is the limit argument value.
			Limit *int32
		}
	}
	lockDo sync.RWMutex
}

// Do calls DoFunc.
func (mock *MockGetWithdrawalsUsecase) Do(ctx context.Context, userId uuid.UUID, offset *int32, limit *int32) ([]entities.Transaction, error) {
	if mock.DoFunc == nil {
		panic("MockGetWithdrawalsUsecase.DoFunc: method is nil but GetWithdrawalsUsecase.Do was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserId uuid.UUID
		Offset *int32
		Limit  *int32
	}{
		Ctx:    ctx,
		UserId: userId,
		Offset: offset,
		Limit:  limit,
	}
	mock.lockDo.Lock()
	mock.calls.Do = append(mock.calls.Do, callInfo)
	mock.lockDo.Unlock()
	return mock.DoFunc(ctx, userId, offset, limit)
}

// DoCalls gets all the calls that were made to Do.
// Check the length with:
//
//	len(mockedGetWithdrawalsUsecase.DoCalls())
func (mock *MockGetWithdrawalsUsecase) DoCalls() []struct {
	Ctx    context.Context
	UserId uuid.UUID
	Offset *int32
	Limit  *int32
} {
	var calls []struct {
		Ctx    context.Context
		UserId uuid.UUID
		Offset *int32
		Limit  *int32
	}
	mock.lockDo.RLock()
	calls = mock.calls.Do
	mock.lockDo.RUnlock()
	return calls
}
